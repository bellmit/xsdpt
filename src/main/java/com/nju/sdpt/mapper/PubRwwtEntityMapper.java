package com.nju.sdpt.mapper;

import com.nju.sdpt.entity.PubRwwtEntity;
import com.nju.sdpt.model.FYEnum;
import com.nju.sdpt.model.RwwtModel;
import org.apache.ibatis.annotations.*;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface PubRwwtEntityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PUB_RWWT
     *
     * @mbggenerated
     */
    int deleteByPrimaryKey(Integer rwwtid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PUB_RWWT
     *
     * @mbggenerated
     */
    int insert(PubRwwtEntity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PUB_RWWT
     *
     * @mbggenerated
     */
    int insertSelective(PubRwwtEntity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PUB_RWWT
     *
     * @mbggenerated
     */
    PubRwwtEntity selectByPrimaryKey(Integer rwwtid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PUB_RWWT
     *
     * @mbggenerated
     */
    int updateByPrimaryKeySelective(PubRwwtEntity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table PUB_RWWT
     *
     * @mbggenerated
     */
    int updateByPrimaryKey(PubRwwtEntity record);

    @Update("update PUB_RWWT set CLJG = #{cljg} where RWWTID =#{rwwtid}")
    void uploadRwwtjg(@Param("rwwtid") Integer rwwtid, @Param("cljg") String cljg);


    @SelectProvider(type = PubRwwtEntityMapper.SqlProvider.class, method = "getRwwtByClrmcAndCljg")
    List<RwwtModel> getRwwtByClrmcAndCljg(@Param("clrmc") String yhmc, @Param("cljg") Integer cljg);


    class SqlProvider {
        public String getRwwtByClrmcAndCljg(@Param("clrmc") String yhmc, @Param("cljg") Integer cljg) {
            StringBuilder sql = new StringBuilder();
            sql.append("select RWWTID as rwwtid, RW.YYSDBH as yysdbh, rtrim(to_char(WTSJ,'yy/mm/dd hh:mm:ss')) as wtsj, SSDRBH as ssdrbh, SSDRMC as ssdrmc, WTRMC as wtrmc, CLRMC as clrmc,");
            sql.append("rtrim(to_char(CLSJ,'yy/mm/dd hh:mm:ss')) as clsj, AH as ah, AJMC as AJMC, FYBH as fybh, ");
            sql.append("case when CLJG = 'Y' then '成功'  when CLJG = 'N' then '失败' else '' end as cljg, ");
            //添加法院名称
            sql.append("case ");
            for (FYEnum fyEnum : FYEnum.values()) {
                sql.append("when FYBH ='" + fyEnum.getFybh() + "' then '" + fyEnum.getJc() + "' ");
            }
            sql.append("else '' end as fymc, ");
            //添加委托方式
            String[] wtfsCN = {"电话送达", "短信送达", "邮寄送达", "来院领取", "直接送达"};
            String[] wtfsEng = {"DHSD", "DXSD", "EMS", "LYLQ", "ZZSD"};
            sql.append("case ");
            for (int i = 0; i < wtfsEng.length; i++) {
                sql.append("when WTFS ='" + wtfsEng[i] + "' then '" + wtfsCN[i] + "' ");
            }
            sql.append("else '未知' end as wtfs ");
            sql.append("from PUB_RWWT RW left join  PUB_YYSD_JB JB on RW.YYSDBH = JB.YYSDBH ");
            sql.append("where RW.CLRMC = '" + yhmc + "' ");
            sql.append(cljg == 0 ? " and CLJG is NULL" : " and CLJG is not NULL");
            return sql.toString();
        }
    }

}